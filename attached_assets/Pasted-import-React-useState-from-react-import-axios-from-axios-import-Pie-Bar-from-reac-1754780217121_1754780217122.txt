import React, { useState } from 'react';
import axios from 'axios';
import { Pie, Bar } from 'react-chartjs-2';
import { Chart as ChartJS, ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement } from 'chart.js';
import './App.css';

// Register Chart.js components
ChartJS.register(ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement);

// --- Sample Data for Initial View ---
const sampleData = `Date,Title,Channel,Impacted_Service,Impact_Type,Modality,Planned_Interruption,Start_Time,End_Time,Duration
8-Aug-25,Issue with Transfer Money,TRANSFER MONEY,Transfer Money and CCBP services,FULL,UNPLANNED,YES,11:00 PM,11:59 PM,00:59:00
6-Aug-25,Delayed response in Web Portals,WEB,Delayed response in portals,PARTIAL,UNPLANNED,NO,2:23 PM,2:26 PM,00:03:00
3-Aug-25,Full DFS System Down,APP,All Service,FULL,PLANNED,NO,12:10 AM,4:00 AM,03:50:00`;

// --- Reusable Table Component ---
const ReportTable = ({ title, data }) => {
  if (!data || data.length === 0) return null;
  const headers = Object.keys(data[0]);

  return (
    <div className="table-wrapper">
      <h2>{title}</h2>
      <table>
        <thead>
          <tr>
            {headers.map(header => <th key={header}>{header.replace(/([A-Z])/g, ' $1').toUpperCase()}</th>)}
          </tr>
        </thead>
        <tbody>
          {data.map((row, index) => (
            <tr key={index}>
              {headers.map(header => <td key={header}>{row[header]}</td>)}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

// --- Main App Component ---
function App() {
  const [downtimeData, setDowntimeData] = useState(sampleData);
  const [report, setReport] = useState(null);
  const [loading, setLoading] = useState(false);

  const handleGenerateReport = async () => {
    setLoading(true);
    setReport(null);
    try {
      // API call to the back-end server
      const response = await axios.post('http://localhost:5001/api/report', { downtimeData });
      setReport(response.data);
    } catch (error) {
      console.error('Error fetching report:', error);
      alert('Failed to generate report. Make sure the backend server is running.');
    } finally {
      setLoading(false);
    }
  };
  
  // --- Chart Data Formatting ---
  const pieChartData = report ? {
    labels: report.chartData.byModality.labels,
    datasets: [{
      data: report.chartData.byModality.values,
      backgroundColor: ['#FF6384', '#36A2EB'],
      hoverBackgroundColor: ['#FF6384', '#36A2EB'],
    }],
  } : null;
  
  const barChartData = report ? {
    labels: report.chartData.byType.labels,
    datasets: [{
      label: 'Downtime in Seconds',
      data: report.chartData.byType.values,
      backgroundColor: ['#FF6384', '#FF9F40', '#4BC0C0'],
    }],
  } : null;


  return (
    <div className="App">
      <header>
        <h1>Automated Downtime Reporter</h1>
      </header>

      <section className="input-section">
        <h3>Paste Your Downtime Data (CSV Format)</h3>
        <textarea
          value={downtimeData}
          onChange={(e) => setDowntimeData(e.target.value)}
          placeholder="Paste your downtime data here..."
        />
        <button onClick={handleGenerateReport} disabled={loading}>
          {loading ? 'Generating...' : 'Generate Report'}
        </button>
      </section>

      {report && (
        <section className="report-section">
          <div className="charts-container">
            <div className='chart-wrapper'>
              <h3>Downtime by Modality</h3>
              {pieChartData && <Pie data={pieChartData} />}
            </div>
             <div className='chart-wrapper'>
              <h3>Downtime by Type (in seconds)</h3>
              {barChartData && <Bar data={barChartData} />}
            </div>
          </div>
          <ReportTable title="Downtime Summary" data={report.summary} />
          <ReportTable title="Unplanned Partial Downtime" data={report.unplannedPartial} />
          <ReportTable title="Unplanned Full Downtime" data={report.unplannedFull} />
          <ReportTable title="Planned Full Downtime" data={report.plannedFull} />
        </section>
      )}
    </div>
  );
}

export default App;